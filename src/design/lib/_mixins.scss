//wide support border radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

//center block level virtically,
//NOTE: parent element must be position: relative
@mixin center-vert-block {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

//centering via margins
@mixin center-horizontal {
  margin: {
    left: auto;
    right: auto;
  }
}

//flexbox center
@mixin flexbox {
  display: flex;
  justify-content: center;
  align-items: center;
}

//++++++++++++++++++++++++
//pseudo for ::before and ::after
@mixin pseudo($display: block, $pos: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $pos;
}

//responsive ratio
@mixin responsive-ratio($x, $y, $pseudo: false) {
  $padding: unquote(($y / $x) * 100 + "%");
  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  } @else {
    padding-top: $padding;
  }
}

//css triangles
@mixin css-triangle(
  $color,
  $direction,
  $size: 6px,
  $position: absolute,
  $round: false
) {
  @include pseudo($pos: $position);
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round($size / 2.5);
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round($size / 2.5);
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

// detault font family
@mixin font-source-sans(
  $size: false,
  $colour: false,
  $weight: false,
  $lh: false
) {
  font-family: "Source Sans Pro", Helvetica, Arial, sans-serif;
  @if $size {
    font-size: $size;
  }
  @if $colour {
    color: $colour;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $lh {
    line-height: $lh;
  }
}

// placeholder mixin
@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

// media query mixin
$breakpoints: (
  "phone": 400px,
  "phone-wide": 480px,
  "phablet": 560px,
  "tablet-small": 640px,
  "tablet": 768px,
  "tablet-wide": 1024px,
  "desktop": 1248px,
  "desktop-wide": 1440px
);
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

//truncation
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

//triggering hardware acceleration for animation
@mixin hardware($backface: true, $perspective: 1000) {
  @if $backface {
    backface-visibility: hidden;
  }
  perspective: $perspective;
}

//overlay
@mixin overlay($opacity) {
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  opacity: $opacity;
}

// Define default font size
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}
//Usage
p {
  @include font-size(14px);
}
//Output
p {
  font-size: 14px; //For unsupported browsers
  font-size: 0.8rem;
}

//Media Breakpoints
@mixin respond-to($media) {
  @if $media == handhelds {
    @media only screen and (max-width: map-get($breakpoints, phone)) {
      @content;
    }
  } @else if $media == tablets {
    @media only screen and (min-width: map-get($breakpoints, phone) + 1) and (max-width: map-get($breakpoints, desktop) - 1) {
      @content;
    }
  } @else if $media == desktops {
    @media only screen and (min-width: map-get($breakpoints, desktop)) {
      @content;
    }
  }
}
